#!/usr/bin/perl

=head1 Program Description

This is a pipeline program which invoke map_chromosome.pl to draw figures for the whole
genome. The options has the same meaning with map_chromosome.pl, the one input file is 
the chromosome list file in gff format. This file can be generated by make_genome_gff.pl
in the glean-gene bin. 
Each figure contains 1 Mb sequence length, there is 0.1 Mb overlap between two neighbour
figures.

=head1 Contact & Version

  Author: Fan Wei, fanw@genomics.org.cn
  Version: 2.0,  Date: 2007-12-21

=head1 Command-line Option
  
  perl map_genome.pl <options> <chr.gff>
  --gene <file>         specify predicted gene input file
  --genemark <str>      specify mark for prediction
  --feature <file>      specify transposon file
  --featmark <str>      specify mark for transposon
  
  --fasta <str>         specify the genome fasta file

  --figurerate <float>  specify the figure rate, default=0.01, 1 dot for 100bp
  --figuredir <str>     specify path of the result figures
  
  --run <str>           set the parallel type, qsub, or multi, default=qsub
  --cpu <int>	        set the cpu number to use in parallel, default=20  
  
  --verbose             output verbose information to screen  
  --help                output help information to screen  

=head1 Exmples

  perl ../bin/map_genome.pl ../input/test_3chrs.fa.gff --gene ../input/test_3chrs.fa.bgf.gff --genemark bgf --gene ../input/test_3chrs.fa.genscan.gff --genemark genscan --feature ../input/test_3chrs.fa.RepeatMasker.out.gff --featmark TE --feature ../input/test_3chrs.fa.trf.dat.gff --featmark TRF

=cut

use strict;
use Getopt::Long;
use Data::Dumper;
use FindBin qw($Bin);

my (@Gene_file,@Gene_mark,@Feature_file,@Feature_mark,$Fasta_file);
my ($Cpu,$Run,$Fig_rate,$Fig_dir,$Verbose,$Help);
GetOptions(
	"gene:s"=>\@Gene_file,
	"genemark:s"=>\@Gene_mark,
	"feature:s"=>\@Feature_file,
	"featmark:s"=>\@Feature_mark,
	"fasta:s"=>\$Fasta_file,
	"figurerate:f"=>\$Fig_rate,
	"figuredir:s"=>\$Fig_dir,
	
	"cpu:i"=>\$Cpu,
	"run:s"=>\$Run,

	"verbose"=>\$Verbose,
	"help"=>\$Help
);
$Fig_dir ||= "./map_chr_figs";
$Fig_dir =~ s/\/$//;
$Fig_rate ||= 0.01; ## 0.01 means 1 dot stand for 100bp
$Cpu ||= 2;
$Run ||= "qsub";
die `pod2text $0` if (@ARGV==0 || defined $Help);

my $chr_gff = shift;

my $region_length = 1000000;
my $overlap_length = 100000;

my $output_cmd;
my $shell_file = "./map_genome.work.sh";

open IN,$chr_gff || die "fail $chr_gff";
while (<IN>) {
	my @t = split /\t/;
	my $chr = $t[0];
	my $chr_length = $t[4];
	#print $chr_length."\n";
	
	for (my $i=1; $i<$chr_length; $i+=$region_length) {
		my $region_start = $i;
		my $region_end = $i + $region_length + $overlap_length - 1;
		$region_end = $chr_length if($region_end > $chr_length);
		##print "$chr\t$region_start\t$region_end\n";
		$output_cmd .= "perl $Bin/map_chromosome.pl --sequence $chr --startpos $region_start --endpos $region_end --figuredir $Fig_dir/$chr --figurerate $Fig_rate  ";
		$output_cmd .= " --fasta $Fasta_file " if(defined $Fasta_file);
		for (my $j=0; $j<@Gene_file; $j++) {
			$output_cmd .= "--gene $Gene_file[$j] --genemark $Gene_mark[$j] ";
		}
		for (my $j=0; $j<@Feature_file; $j++) {
			$output_cmd .= "--feature $Feature_file[$j] --featmark $Feature_mark[$j] ";
		}
		$output_cmd .= "\n";
	}
}
close IN;

open OUT, ">$shell_file" || die "fail $shell_file";
print OUT $output_cmd;
close OUT;


##run the shell file
if ($Run eq "qsub") {
	`perl $Bin/qsub-sge.pl --inter 1 --maxjob $Cpu $shell_file`;
}
if ($Run eq "multi") {
	`perl $Bin/multi-process.pl -cpu $Cpu $shell_file`;
}
