#!/usr/bin/perl
use Getopt::Long;
use FindBin qw ($Bin);
use SVG;
our %opt;

GetOptions (\%opt,"dark:s","help");


my $help=<<USAGE;

This script is designed to draw region comparion between two or more genomes.
The following files are need to this script: 
1. fasta sequence file for each sequence (one species one file, not needed). Head format, Os_chr01_1002320_1192390.
2. Os_chr01_1002320_1192390.gff, gene and TE (merged in one file) gff annotation file for each sequence.
3. genepair.txt, gene relations between species. According the order of species, only considering the next species to connect.   Example: gene1 [TAB] gene2 [TAB] identity
4. drawRegion.config, information of species to be drawn, the order of name is the same with its position in the figure. 
   Example: Oryza sativa [TAB] Os_chr01_1002320_1192390 [TAB] 1300191
All these file need to be generated by a preparition step.

Run: perl drawRegion.pl

-dark: point to file that contain a list of gene to be darked in the figure. one line per gene or one line multi by blank.

USAGE


if ($opt{help}){
   print "$help\n";
   exit ();
}

our $longest;
our $num2draw;
our @species;
our @order;
our @len;
our $gffdir="/share/raid12/chenjinfeng/FFgenome/drawRegion/input/gff";
my  $config="$Bin/drawRegion.config";
our $genepair="/share/raid12/chenjinfeng/FFgenome/drawRegion/input/genepair.txt";
& parseConfig($config);

my $width=800;
my $height=($num2draw-2)*110+300;
our $chrheight=10;
our $rate=($width-200)/$longest;
my $x=150;
my $svg=SVG->new(width=>$width,height=>$height);
for (my $i=0;$i<@order;$i++){
    
    ##############draw chr line############
    my $chrwidth=$len[$i]*$rate;
    my $y=$i*100+150;
    my $chrline=$svg->rectangle(
            x=>$x,y=>$y,
            width=>$chrwidth,height=>$chrheight,
            style=>{
               stroke=>'black',
              'fill-opacity'=>0
            }
    );
    ##############annotation text##########
    my $textx=$x-130;
    my $texty=$y+8;
    my $chrname=$svg->text(
            x=>$textx,y=>$texty,
            style=>{
               fontsize=>'4'
            }
    )->cdata($species[$i]);
    ##############gene feature############
    my $gff="$gffdir/$order[$i].gff";
    print "$gff\n";
    $svg=drawGFFbox($gff,$svg,$x,$y);
}
############connect homologous gene##########
for(my $i=0;$i<@order-1;$i++){
    my $gff1="$gffdir/$order[$i].gff";
    my $gff2="$gffdir/$order[$i+1].gff";
    #print "$gff1\t$gff2\t$i\t$x\n";
    $svg=connectgene($gff1,$gff2,$svg,$i,$x);
}


my $outfile="RegionCom.svg";
& writesvg($outfile,$svg);


##########sub function##################################
sub connectgene
{
my ($gff1,$gff2,$svg,$i,$x)=@_;
my %hash;
open IN, "$genepair" or die "$!";
while(<IN>){
    my @unit=split("\t",$_);
    my $index=$unit[0]."-".$unit[1];
    $hash{$index}=$unit[2];
}
close IN;
my $id2mid1;
if ($gff1 =~/OS/i){
   $id2mid1=TigrGFFid2mid($gff1);
}else{
   $id2mid1=GFFid2mid($gff1);
}
my $id2mid2;
if ($gff2 =~/OS/i){
   $id2mid2=TigrGFFid2mid($gff2);
}else{
   $id2mid2=GFFid2mid($gff2);
}
my @id1=keys %$id2mid1;
my @id2=keys %$id2mid2;
for(my $a=0;$a<@id1;$a++){
   for(my $b=0;$b<@id2;$b++){
       my $pair1=$id1[$a]."-".$id2[$b];
       my $pair2=$id2[$b]."-".$id1[$a];
       if (exists $hash{$pair1} or exists $hash{$pair2}){
           my $x1=$id2mid1->{$id1[$a]}*$rate+$x;
           my $y1=$i*100+150+10;
           my $x2=$id2mid2->{$id2[$b]}*$rate+$x;
           my $y2=($i+1)*100+150;
           #print "$x1\t$y1\t$x2\t$y2\n";
           my $line=$svg->line(
                x1=>$x1,y1=>$y1,
                x2=>$x2,y2=>$y2,
                style=>{
                  stroke=>'black'
                }
           );
       }
   }
}
return $svg;
}

sub TigrGFFid2mid
{
my ($gff)=@_;
my %id2mid;    ##ID for element
open IN, "$gff" or die "$!";
while (<IN>){
    chomp $_;
    next if ($_=~/^#/);
    my @unit=split("\t",$_);
    if ($unit[2]=~/mRNA/){
        my $mid=$unit[3]+($unit[4]-$unit[3]+1)/2;
        if ($unit[8]=~/Alias=(LOC_Os\w+\.\d+)/){
            $id2mid{$1}=$mid;
        }
    }

}
close IN;
return (\%id2mid);
}

sub GFFid2mid
{
my ($gff)=@_;
my %id2mid;    ##ID for element
open IN, "$gff" or die "$!";
while (<IN>){
    chomp $_;
    next if ($_=~/^#/);
    my @unit=split("\t",$_);
    if ($unit[2]=~/mRNA/){
        my $mid=$unit[3]+($unit[4]-$unit[3]+1)/2;
        if ($unit[8]=~/ID=(.*);/ or $unit[8] =~/ID=(.*)/){
            $id2mid{$1}=$mid;
        }
    }

}
close IN;
return (\%id2mid);
}



sub drawGFFbox
{
my ($gff,$svg,$x,$y)=@_;
my %dark;
if (exists $opt{dark}){
    open DARK, "$opt{dark}" or die "$!";
       while(<DARK>){
           chomp $_;
           my @unit=split(" ",$_);
           foreach(@unit){
              $dark{$_}=1;
              #print "$_\n";
           }
       }
    close DARK;
}

open IN, "$gff" or die "$!";
while (<IN>){
   my @unit=split("\t",$_);
   if ($unit[2] eq "mRNA"){
        my $id;
        if ($unit[8]=~/ID=(.*);/ or $unit[8] =~/ID=(.*)/){
            $id=$1;
        }
        my $color="red"; 
        if (exists $dark{$id}){
           $color="black";
        }
        #print "$id\t$color\n";
        my $genewidth=($unit[4]-$unit[3]+1)*$rate;
        my $genex=$unit[3]*$rate+$x;
        my $geney=$y;
        my $genebox=$svg->rectangle(
            x=>$genex,y=>$geney,
            width=>$genewidth,height=>$chrheight,
            style=>{
               fill=>$color
            }
        );
   } 
}
close IN;
return $svg;
}


sub parseConfig
{
my ($config)=@_;
my $counter;
open IN, "$config" or die "$!";
while (<IN>){
     next if (length $_ < 2);
     $counter++;
     my @unit=split("\t",$_); 
     push (@len, $unit[2]);
     push (@species,$unit[0]);
     push (@order,$unit[1]);
}
close IN;
@len=sort {$a <=> $b} @len;
$num2draw=@len;
$longest=$len[$#len];
print "Longest:$longest\n";
}


################################### sub for write svg to file
sub writesvg {
my ($file,$svg)=@_;
#print "$file\n";
open OUT, ">$file" or die "can not open my file";
       print OUT $svg->xmlify;
close OUT;
       system "/share/raid12/chenjinfeng/tools/draw/svg2xxx_release/svg2xxx $file -t png";
}
